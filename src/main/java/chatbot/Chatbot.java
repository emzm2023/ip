package chatbot;import chatbot.exception.*;import chatbot.task.Deadline;import chatbot.task.Event;import chatbot.task.Task;import chatbot.task.Todo;import java.io.ByteArrayOutputStream;import java.io.PrintStream;import java.time.format.DateTimeParseException;import java.util.List;import javafx.application.Application;public class Chatbot {    /** Name of the Chatbot. */    private static final String NAME = "Bro";    /** chatbot.TaskList for the Chatbot. */    private TaskList taskList;    /** chatbot.Ui for the Chatbot. */    private Ui ui;    /** chatbot.Storage for the Chatbot. */    private Storage storage;    /** chatbot.Parser for the Chatbot. */    private Parser parser;    /**     * Constructor for the Chatbot.     */    public Chatbot() {        try {            this.taskList = new TaskList();            this.ui = new Ui(NAME);            this.storage = new Storage();            this.parser = new Parser();            this.storage.loadTasksFromFile(this.taskList);        } catch (Exception e) {            this.ui.printExceptionMessage(e);        }    }    /**     * Greets the user.     */    private void greet() {        this.ui.greet();    }    /**     * Causes Chatbot to exit.     */    private void exit() {        this.ui.exit();    }    /**     * Adds task inputted by user to taskList. Prints out confirmation.     *     * @param input The command inputted by the user.     * @throws InvalidTodoException If format of todo entered is invalid.     * @throws InvalidDeadlineException If format of deadline entered is invalid.     * @throws InvalidEventException If format of event entered is invalid.     * @throws InvalidCommandException If format of command entered is invalid.     */    private void add(String input) throws InvalidTodoException,            InvalidDeadlineException, InvalidEventException, InvalidCommandException {        Task newTask;        List<String> taskArr = this.parser.parseAdd(input);        String type = taskArr.get(0);        if (type.equals("todo")) {            String description = taskArr.get(1);            newTask = new Todo(description);        } else if (type.equals("deadline")) {            try {                String description = taskArr.get(1);                String deadline = taskArr.get(2);                newTask = new Deadline(description, deadline);            } catch (DateTimeParseException e) {                throw new InvalidDeadlineException();            }        } else if (type.equals("event")) {            try {                String description = taskArr.get(1);                String start = taskArr.get(2);                String end = taskArr.get(3);                newTask = new Event(description, start, end);            } catch (DateTimeParseException e) {                throw new InvalidEventException();            }        } else {            throw new InvalidCommandException();        }        this.taskList.add(newTask);        this.ui.printAddConfirmation(this.taskList);    }    /**     * Lists out all the tasks in taskList.     */    private void listTasks() {        this.ui.listTasks(this.taskList);    }    /**     * Marks specified task as done. Prints confirmation.     *     * @param input The user input.     * @throws InvalidTaskNumberException If there is no task with the task number in the taskList.     * @throws InvalidCommandException If format of command entered is invalid.     */    private void markTaskStatusTrue(String input) throws InvalidTaskNumberException, InvalidCommandException {        int taskNum = parser.parseMarkTaskStatusTrue(input);        if (taskNum > this.taskList.size()) {            throw new InvalidTaskNumberException(taskNum);        } else {            taskList.markTaskTrue(taskNum - 1);            this.ui.printMarkDoneConfirmation(taskNum - 1, this.taskList);        }    }    /**     * Marks specified task as undone. Prints confirmation.     *     * @param input The user input.     * @throws InvalidTaskNumberException If there is no task with the task number in the taskList.     * @throws InvalidCommandException If format of command entered is invalid.     */    private void markTaskStatusFalse(String input) throws InvalidTaskNumberException, InvalidCommandException {        int taskNum = parser.parseMarkTaskStatusFalse(input);        if (taskNum > this.taskList.size()) {            throw new InvalidTaskNumberException(taskNum);        } else {            taskList.markTaskFalse(taskNum - 1);            this.ui.printMarkUndoneConfirmation(taskNum - 1, this.taskList);        }    }    /**     * Deletes the specified task in the list.     *     * @param input The user input.     * @throws InvalidTaskNumberException If there is no task with the task number in the taskList.     * @throws InvalidCommandException If format of command entered is invalid.     */    public void delete(String input) throws InvalidTaskNumberException, InvalidCommandException {        int taskNum = parser.parseDelete(input);        this.taskList.delete(taskNum - 1);        this.ui.printDeleteConfirmation(taskNum - 1, this.taskList);    }    /** Lists out the tasks in the taskList with the matching keyword.     *     * @param input The user input.     * @throws InvalidCommandException If format of command entered is invalid.     */    public void find(String input) throws InvalidCommandException {        String keyword = parser.parseFind(input);        this.ui.listMatchingTasks(keyword, this.taskList.find(keyword));    }    /**     * Runs chatbot with given user input.     * Update current state of tasks to data file.     *     * @params userInput The user input.     */    private void readInput(String userInput) {        try {            if (userInput.equals("list")) {                this.listTasks();            } else if (userInput.equals("bye")) {                this.exit();            } else if (userInput.startsWith("add ")) {                this.add(userInput);            } else if (userInput.startsWith("mark ")) {                this.markTaskStatusTrue(userInput);            } else if (userInput.startsWith("unmark ")) {                this.markTaskStatusFalse(userInput);            } else if (userInput.startsWith("delete ")) {                this.delete(userInput);            } else if (userInput.startsWith("find ")) {                this.find(userInput);            } else {                throw new InvalidCommandException();            }            this.saveTasks();        } catch (Exception e) {            this.ui.printExceptionMessage(e);        }    }    /**     * Runs chatbot after reading in user input from System.in.     * Update current state of tasks to data file.     */    private void readInput() {        String userInput = this.ui.getUserInput();        try {            if (userInput.equals("list")) {                this.listTasks();            } else if (userInput.equals("bye")) {                this.exit();            } else if (userInput.startsWith("add ")) {                this.add(userInput);            } else if (userInput.startsWith("mark ")) {                this.markTaskStatusTrue(userInput);            } else if (userInput.startsWith("unmark ")) {                this.markTaskStatusFalse(userInput);            } else if (userInput.startsWith("delete ")) {                this.delete(userInput);            } else if (userInput.startsWith("find ")) {                this.find(userInput);            } else {                throw new InvalidCommandException();            }            this.saveTasks();        } catch (Exception e) {            this.ui.printExceptionMessage(e);        } finally {            if (!userInput.equals("bye")) {                this.readInput(this.ui.getUserInput());            }        }    }    /**     * Returns the greeting of the bot.     * @return the greeting of the bot     */    public String getGreeting() {        ByteArrayOutputStream output = new ByteArrayOutputStream();        PrintStream original = System.out;        System.setOut(new PrintStream(output));        this.greet();        System.setOut(original);        return output.toString();    }    /** Returns the response of the chatbot from System.out.     *     * @param userInput The user input.     * @return The String representation of the response.     */    public String getResponse(String userInput) {        ByteArrayOutputStream output = new ByteArrayOutputStream();        PrintStream original = System.out;        System.setOut(new PrintStream(output));        this.readInput(userInput);        System.setOut(original);        return output.toString();    }    /**     * Saves current taskList to data file.     */    public void saveTasks() {        try {            this.storage.saveTasks(this.taskList);        } catch (Exception e) {            this.ui.printExceptionMessage(e);        }    }    public static void main(String[] args) {        Chatbot chatbot = new Chatbot();        chatbot.greet();        chatbot.readInput();    }}