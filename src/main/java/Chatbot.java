import java.util.ArrayList;import java.util.List;import java.util.Scanner;public class Chatbot {    /** The name of the Chatbot. */    private static final String NAME = "Bro";    /** The scanner for the Chatbot. */    private Scanner scanner;    /** The taskList for the Chatbot. */    private List<Task> taskList;    /** Constructor for the Chatbot. */    private Chatbot() {        this.scanner = new Scanner(System.in);        this.taskList = new ArrayList<>();    }    /** Greets the user. */    private void greet() {        System.out.println("Hello! I'm " + NAME + "\n" + "What can I do for you?\n");    }    /** Causes Chatbot to exit. */    private void exit() {        System.out.println("Bye. Hope to see you again soon!");        this.scanner.close();    }    /** Echoes commands entered by user.     *     * @param input The command entered by the user.     */    private void echo(String input) {        System.out.println(input + "\n");    }    /** Adds task inputted by user to taskList. Prints out confirmation.     *     * @param input The command inputted by the user.     */    private void add(String input) throws InvalidTodoException,            InvalidDeadlineException, InvalidEventException, InvalidCommandException {        Task newTask = null;        String nextInput;        try {            nextInput = input.substring(4);            if (nextInput.isBlank()) {                throw new InvalidCommandException();            }        } catch (StringIndexOutOfBoundsException e) {            throw new InvalidCommandException();        }        if (nextInput.startsWith("todo")) {            try {                String description = nextInput.substring(5);                if (description.isBlank()) {                    throw new InvalidTodoException();                } else {                    newTask = new Todo(description);                }            } catch (StringIndexOutOfBoundsException e) {                throw new InvalidTodoException();            }        } else if (nextInput.startsWith("deadline")) {            try {                int by = nextInput.indexOf("/by");                String description = nextInput.substring(9, by - 1);                String deadline = nextInput.substring(by + 4);                if (description.isBlank() || deadline.isBlank()) {                    throw new InvalidDeadlineException();                } else {                    newTask = new Deadline(description, deadline);                }            } catch (StringIndexOutOfBoundsException e) {                throw new InvalidDeadlineException();            }        } else if (nextInput.startsWith("event")) {            try {                int from = nextInput.indexOf("/from");                int to = nextInput.indexOf("/to");                String description = nextInput.substring(6, from - 1);                String start = nextInput.substring(from + 6, to - 1);                String end = nextInput.substring(to + 4);                if (description.isBlank() || start.isBlank() || end.isBlank()) {                    throw new InvalidEventException();                } else {                    newTask = new Event(description, start, end);                }            } catch (StringIndexOutOfBoundsException e) {                throw new InvalidEventException();            }        } else {            throw new InvalidCommandException();        }        if (newTask != null) {            this.taskList.add(newTask);            System.out.println("Got it. I've added this task:\n" + newTask);            System.out.println("Now you have " + this.taskList.size() + " tasks in the list.\n");        }    }    /** Lists out all the tasks in taskList. */    private void listTasks() {        System.out.println("Here are the tasks in your list:\n");        for (int i = 0; i < taskList.size(); i++) {            int num = i + 1;            System.out.println(num +". " + taskList.get(i).toString());        }        System.out.print("\n");    }    /** Marks specified task as done. Prints confirmation.     *     * @param input The user input.     */    private void markTaskStatusTrue(String input) throws InvalidTaskNumberException, InvalidCommandException {        int taskIndex;        try {            String nextInput = input.substring(5);            if (nextInput.isBlank()) {                throw new InvalidCommandException();            } else {                taskIndex = Integer.parseInt(nextInput);            }        } catch (StringIndexOutOfBoundsException e) {            throw new InvalidCommandException();        }        if (taskIndex > this.taskList.size()) {            throw new InvalidTaskNumberException(taskIndex);        } else {            Task task = taskList.get(taskIndex - 1);            task.markStatus(true);            System.out.println("Nice! I've marked this task as done:\n" + task + "\n");        }    }    /** Marks specified task as undone. Prints confirmation.     *     * @param input The user input.     */    private void markTaskStatusFalse(String input) throws InvalidTaskNumberException, InvalidCommandException {        int taskIndex;        try {            String nextInput = input.substring(7);            if (nextInput.isBlank()) {                throw new InvalidCommandException();            } else {                taskIndex = Integer.parseInt(nextInput);            }        } catch (StringIndexOutOfBoundsException e) {            throw new InvalidCommandException();        }        if (taskIndex > this.taskList.size()) {            throw new InvalidTaskNumberException(taskIndex);        } else {            Task task = taskList.get(taskIndex - 1);            task.markStatus(false);            System.out.println("OK, I've marked this task as not done yet:\n" + task + "\n");        }    }    /** Deletes the specified task in the list.     *     * @param input The user input.     */    public void delete(String input) throws InvalidTaskNumberException, InvalidCommandException {        int taskIndex;        try {            String nextInput = input.substring(7);            if (nextInput.isBlank()) {                throw new InvalidCommandException();            } else {                taskIndex = Integer.parseInt(nextInput);            }        } catch (StringIndexOutOfBoundsException e) {            throw new InvalidCommandException();        }        Task removed;        try {            removed = this.taskList.remove(taskIndex - 1);        } catch (IndexOutOfBoundsException e) {            throw new InvalidTaskNumberException(taskIndex);        }        System.out.println("Noted. I've removed this task:\n" + removed + "\n");    }    /** Reads user input. Exits if user input is "bye",     * lists tasks if input is "list", else, echoes commands. */    private void readInput() {        System.out.print("> ");        String userInput = this.scanner.nextLine();        try {            if (userInput.equals("list")) {                this.listTasks();            } else if (userInput.equals("bye")) {                this.exit();            } else if (userInput.startsWith("add ")) {                this.add(userInput);            } else if (userInput.startsWith("mark ")) {                this.markTaskStatusTrue(userInput);            } else if (userInput.startsWith("unmark ")) {                this.markTaskStatusFalse(userInput);            } else if (userInput.startsWith("delete ")) {                this.delete(userInput);            } else {                throw new InvalidCommandException();            }        } catch (Exception e) {            System.out.println(e.getMessage() + "\n");        } finally {            if (!userInput.equals("bye")) {                this.readInput();            }        }    }    public static void main(String[] args) {        Chatbot chatbot = new Chatbot();        chatbot.greet();        chatbot.readInput();    }}